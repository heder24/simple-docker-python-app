name: 'python-app'
env:
  DOCKER_USER: ${{secrets.DOCKER_HUB_USER}}
  DOCKER_PASSWORD: ${{secrets.DOCKER_HUB_TOKEN}}
  DOCKER_REPOSITORY: pyhton-app
  NODE_IMAGE_TAG: simple-python-app

on:
  push:
    branches: 
  pull_request: 
    branches: [ "main" ]

permissions: write-all
  # contents: read
  # issues: write

jobs:
  job1:
  
  build-scan-image:
    
    name: Build and Scan Docker Images
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: Build and tag Image
      run: |
        docker build -t ${{env.DOCKER_USER}}/${{env.DOCKER_REPOSITORY}}:${{env.NODE_IMAGE_TAG}} .
        
    - name: Run Trivy vulnerability scanner
      id: scan
      uses: crazy-max/ghaction-container-scan@v3
      with: 
        image: ${{env.DOCKER_USER}}/${{env.DOCKER_REPOSITORY}}:${{env.NODE_IMAGE_TAG}}
        annotations: true
        dockerfile: ./Dockerfile
        severity: "CRITICAL,HIGH" 

    - name: Upload SARIF file
      if: ${{ steps.scan.outputs.sarif != '' }}
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: ${{ steps.scan.outputs.sarif }}

    - name: Push Image to Docker Hub    
      run: |
        docker login -u ${{env.DOCKER_USER}} -p ${{env.DOCKER_PASSWORD}}
        docker push ${{env.DOCKER_USER}}/${{env.DOCKER_REPOSITORY}}:${{env.NODE_IMAGE_TAG}}
      

  job2:
  terraform:
    name: 'Terraform simple-pyhton-app'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: "./"

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #   run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: terraform plan -input=false -no-color

   # Add a comment to pull requests with plan results
    - name: add-plan-comment
      id: comment
      uses: actions/github-script@v3
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
          <details><summary>Show Plan</summary>
          
          \`\`\`${process.env.PLAN}\`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    # Scan Terraform Config for Vulnerabilities

    # - name: Run Snyk to check configuration files for security issues
    #   # Snyk can be used to break the build when it detects security issues.
    #   # In this case we want to upload the issues to GitHub Code Scanning
    #   continue-on-error: true
    #   uses: snyk/actions/iac@master
    #   env:
    #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    #   with:
    #     args: --sarif-file-output=snyk.scan
    #     sarif: false
    # - name: Upload result to GitHub Code Scanning
    #   uses: github/codeql-action/upload-sarif@v2
    #   with:
    #     sarif_file: snyk.scan

  
    - name: Run Trivy vulnerability scanner in IaC mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        hide-progress: false
        format: 'sarif'
        output: 'trivy-results.sarif'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'


    # - name: Run tfsec
    #   uses: aquasecurity/tfsec-sarif-action@9a83b5c3524f825c020e356335855741fd02745f
    #   with:
    #     sarif_file: tfsec.sarif

    # - name: Upload SARIF file
    #   uses: github/codeql-action/upload-sarif@v2
    #   with:
    #     # Path to SARIF file relative to the root of the repository
    #     sarif_file: tfsec.sarif

    #On push to "main", build or change infrastructure according to Terraform configuration files
    #Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      env:
        apply: false
      #if: github.ref == 'refs/heads/"main"' && github.event_name == 'push' d
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false

    - name: Terraform Destroy
      env:
        destroy: false
      
      if: ${{ env.destroy == 'true' }} 
      #if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform destroy -auto-approve -input=true
 