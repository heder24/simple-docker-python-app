name: python-app

env:
  DOCKER_USER: ${{ secrets.DOCKER_HUB_USER }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_HUB_TOKEN }}
  DOCKER_REPOSITORY: python-app
  NODE_IMAGE_TAG: simple-python-app

on:
  push:
    branches:
      - main
  pull_request:
    branches: 
      - main

permissions: write-all
  # contents: read
  # issues: write

jobs:
  job1:
    name: Build and Scan Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Build and tag Image
        run: |
          docker build -t ${{ env.DOCKER_USER }}/${{ env.DOCKER_REPOSITORY }}:${{ env.NODE_IMAGE_TAG }} .

      - name: Run Trivy vulnerability scanner
        id: scan
        uses: crazy-max/ghaction-container-scan@v3
        with: 
          image: ${{ env.DOCKER_USER }}/${{ env.DOCKER_REPOSITORY }}:${{ env.NODE_IMAGE_TAG }}
          annotations: true
          dockerfile: ./Dockerfile
          severity: "CRITICAL,HIGH" 

      - name: Upload SARIF file
        if: ${{ steps.scan.outputs.sarif != '' }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

      - name: Push Image to Docker Hub    
        run: |
          docker login -u ${{ env.DOCKER_USER }} -p ${{ env.DOCKER_PASSWORD }}
          docker push ${{ env.DOCKER_USER }}/${{ env.DOCKER_REPOSITORY }}:${{ env.NODE_IMAGE_TAG }}

  job2:
    name: Terraform simple-python-app
    needs: job1
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
        working-directory: "./"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -no-color

      - name: add-plan-comment
        id: comment
        uses: actions/github-script@v3
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
        
            <details><summary>Show Plan</summary>
            
            \`\`\`${process.env.PLAN}\`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Run Trivy vulnerability scanner in IaC mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          hide-progress: false
          format: 'sarif'
          output: 'trivy-results.sarif'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          apply: false
        run: terraform apply -auto-approve -input=false

      - name: Terraform Destroy
        if: ${{ env.destroy == 'true' }} 
        run: terraform destroy -auto-approve -input=true
